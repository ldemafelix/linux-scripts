#!/usr/bin/env php
<?php

// Initialize variables
$data = [];

// Get environment variables
$data['name'] = getenv('sonarr_series_title') ?? '';
$data['name'] = str_replace(['\', '/', ':', '?', '"', '<', '>', '|'], '', $data['name']);
$data['type'] = getenv('sonarr_series_type') ?? '';
$data['source'] = getenv('sonarr_episodefile_sourcepath') ?? '';
$data['season'] = getenv('sonarr_episodefile_seasonnumber') ?? '';
$data['episodes'] = getenv('sonarr_episodefile_episodenumbers') ?? '';
$data['quality'] = getenv('sonarr_episodefile_quality') ?? '';
$data['title'] = getenv('sonarr_episodefile_episodetitles') ?? '';
$data['working_directory'] = '/path/to/transcodes/';
$data['path'] = getenv('sonarr_episodefile_sourcepath');

// Set destination
$data['destination'] = $data['working_directory'] . $data['name'] . '/';
@mkdir($data['destination'], 0755);

// Paths
$data['ffmpeg'] = "/usr/bin/ffmpeg";
$data['rclone'] = "/usr/bin/rclone";
$data['ffprobe'] = "/usr/bin/ffprobe";
$data['rclone_remote'] = "your-remote:";

// Create an output filename
$data['season'] = str_pad($data['season'], 2, "0", STR_PAD_LEFT);
$episodes = "";
foreach (explode(",", $data['episodes']) as $episode) {
	$episodes .= "E" . str_pad($episode, 2, "0", STR_PAD_LEFT);
}

$data['output'] = "{$data['destination']}S{$data['season']}{$episodes} - {$data['title']} ({$data['quality']}).mp4";

// Start conversion
$type = (strtolower($data['type']) == 'anime' ? 'Anime' : 'Shows');
if ($type == 'Anime') {
	// Inspect file for audio and subtitles
	$jsonFile = "{$data['destination']}S{$data['season']}{$episodes} - {$data['title']} ({$data['quality']}).json";
	exec("{$data['ffprobe']} -v quiet -print_format json -show_format -show_streams \"{$data['source']}\" > \"{$jsonFile}\"");
	$streamData = json_decode(file_get_contents($jsonFile));
	
	// Determine settings
	$audioStream = 0;
	$subtitleStream = 0;
	foreach ($streamData->streams as $stream) {
		if ($stream->codec_type == 'audio' && !empty($stream->tags->language) && strtolower($stream->tags->language) == 'jpn') {
			// This is the correct audio stream
			$audioStream = $stream->index;
		}
		if ($stream->codec_type == 'subtitle' && !empty($stream->tags->language) && strtolower($stream->tags->language == 'eng')) {
			// This is the correct subtitle stream
			$subtitleStream = $stream->index;
		}
	}
		
	// Set the command
	$command = <<<EOF
{$data['ffmpeg']} -i "{$data['source']}" -filter_complex "[0:v][0:{$subtitleStream}]overlay[v]" -map "[v]" -map 0:{$audioStream} -f mp4 -threads 0 -y "{$data['output']}" &> "{$data['destination']}S{$data['season']}{$episodes} - {$data['title']} ({$data['quality']}).log"
EOF;
} else {
	// This is not anime, so we don't care
	$command = <<<EOF
{$data['ffmpeg']} -fix_sub_duration -i "{$data['source']}" -vcodec copy -f mp4 -threads 0 -y "{$data['output']}" &> "{$data['destination']}S{$data['season']}{$episodes} - {$data['title']} ({$data['quality']}).log"
EOF;
}
exec($command, $commandOutput);

// Move somewhere
$rcloneCommand = <<<EOF
{$data['rclone']} move "{$data['output']}" "{$data['rclone_remote']}{$type}/{$data['name']}/Season {$data['season']}/" -P &> "{$data['destination']}S{$data['season']}{$episodes} - {$data['title']} ({$data['quality']}).rclone.log"
EOF;
exec($rcloneCommand);

// Cleanup
exec("rm -rf \"{$data['output']}\"");
exec("rm -rf \"{$data['path']}\"");
exec("rm -rf \"{$data['source']}\"");
